heat_template_version: rocky

description: >
  OpenStack containerized Mistral Event Engine service

parameters:
  ContainerMistralEventEngineImage:
    description: image
    type: string
  ContainerMistralConfigImage:
    description: The container image to use for the mistral config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json

resources:

  ContainersCommon:
    type: ../containers-common.yaml

  MySQLClient:
    type: ../database/mysql-client.yaml

  MistralBase:
    type: ./mistral-base.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Mistral Event Engine role.
    value:
      service_name: mistral_event_engine
      config_settings:
        get_attr: [MistralBase, role_data, config_settings]
      service_config_settings: {get_attr: [MistralBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: mistral
        puppet_tags: mistral_config
        step_config:
          list_join:
            - "\n"
            - - include ::tripleo::profile::base::mistral
              - get_attr: [MySQLClient, role_data, step_config]
        config_image: {get_param: ContainerMistralConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/mistral_event_engine.json:
          command: /usr/bin/mistral-server --config-file=/etc/mistral/mistral.conf --log-file=/var/log/mistral/event-engine.log --server=event-engine
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/mistral
              owner: mistral:mistral
              recurse: true
      docker_config:
        step_4:
          mistral_event_engine:
            image: {get_param: ContainerMistralEventEngineImage}
            net: host
            privileged: false
            restart: always
            healthcheck: {get_attr: [ContainersCommon, healthcheck_rpc_port]}
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /run:/run
                  - /var/lib/kolla/config_files/mistral_event_engine.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/mistral:/var/lib/kolla/config_files/src:ro
                  - /var/log/containers/mistral:/var/log/mistral:z
                  - /var/lib/mistral:/var/lib/mistral:ro
                  - /usr/share/ansible/:/usr/share/ansible/:ro
                  - /usr/share/openstack-tripleo-validations:/usr/share/openstack-tripleo-validations:ro
            environment:
              KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
      host_prep_tasks:
        - name: create persistent directories
          file:
            path: "{{ item.path }}"
            state: directory
            setype: "{{ item.setype }}"
            mode: "{{ item.mode }}"
          with_items:
            - { 'path': /var/log/containers/mistral, 'setype': svirt_sandbox_file_t, 'mode': '0750' }
        - name: enable virt_sandbox_use_netlink for healthcheck
          seboolean:
            name: virt_sandbox_use_netlink
            persistent: yes
            state: yes
